---

- name: extract vrouter artifacts from container
  win_shell: >
    docker run -v {{ win_host_artifacts_dir }}:{{ win_container_artifacts_dir }}
    {{ global_configuration.WINDOWS_CONTAINER_REGISTRY }}/contrail-windows-vrouter:{{ contrail_configuration.CONTRAIL_VERSION }}

- name: copy debug dlls to compute node
  win_copy:
    src: '{{ global_configuration.win_debug_dlls }}/'
    dest: 'C:\Windows\System32\'
  when: global_configuration.win_debug_dlls is defined

- name: import vrouter certificate
  win_shell: |
    Import-Certificate -CertStoreLocation Cert:\LocalMachine\Root\ {{ win_host_artifacts_dir }}\vrouter\vRouter.cer
    Import-Certificate -CertStoreLocation Cert:\LocalMachine\TrustedPublisher\ {{ win_host_artifacts_dir }}\vrouter\vRouter.cer

- name: install vrouter driver
  win_package:
    path: '{{ win_host_artifacts_dir }}\vrouter\vRouter.msi'
    state: present

- name: install utils
  win_package:
    path: '{{ win_host_artifacts_dir }}\vrouter\utils.msi'
    state: present

- name: install vrouter agent
  win_package:
    path: '{{ win_host_artifacts_dir }}\agent\contrail-vrouter-agent.msi'
    state: present

- name: run hostname command
  win_shell: "hostname"
  register: hostname_output

- name: extract real hostname
  set_fact:
    hostname: "{{ hostname_output.stdout_lines | last}}"

- name: get auth token from keystone
  delegate_to: localhost
  uri:
    url: "{{ contrail_configuration.KEYSTONE_AUTH_PROTO }}://{{ contrail_configuration.KEYSTONE_AUTH_HOST }}:{{ contrail_configuration.KEYSTONE_AUTH_PUBLIC_PORT }}{{ contrail_configuration.KEYSTONE_AUTH_URL_TOKENS }}"
    method: POST
    body_format: json
    body: |
      {
        "auth": {
          "tenantName": "{{ contrail_configuration.KEYSTONE_AUTH_ADMIN_TENANT }}",
          "passwordCredentials": {
            "username": "{{ contrail_configuration.KEYSTONE_AUTH_ADMIN_USER }}",
            "password": "{{ contrail_configuration.KEYSTONE_AUTH_ADMIN_PASSWORD }}"
          }
        }
      }
    return_content: true
  register: auth_token_response

- name: extract auth_token from response
  set_fact:
    auth_token: "{{ auth_token_response.json.access.token.id }}"

- name: create virtual router in contrail
  delegate_to: localhost
  uri:
    url: "http://{{ contrail_configuration.CONFIG_NODES }}:{{ contrail_configuration.CONFIG_API_PORT }}/virtual-routers"
    method: POST
    body_format: json
    body: |
      {
        "virtual-router": {
          "virtual_router_ip_address": "{{ inventory_hostname }}",
          "fq_name": ["default-global-system-config", "{{ hostname }}"],
          "parent_type": "global-system-config"
        }
      }
    status_code: 200, 409
    headers:
      X-Auth-Token: "{{ auth_token }}"
