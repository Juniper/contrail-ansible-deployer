---
- name: docker info for getting cgroup driver
  shell: docker info 2>/dev/null |grep "Cgroup Driver" |awk '{print $3}'
  register: docker_info

- name: get cgroup driver
  set_fact:
    cgroup_driver: "{{ docker_info.stdout }}"

- name: set cgroup driver to cgroupfs
  lineinfile:
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: '^Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=.*"'
    line: 'Environment="KUBELET_CGROUP_ARGS=--cgroup-driver={{ cgroup_driver }}"'

- name: enable kubelet service
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: True

- name: set controller list
  set_fact:
    controller_list: "{{ contrail_configuration.CONTROLLER_NODES.split(',') }}"

- debug:
    msg: "c list {{ controller_list }}"

- debug:
    msg: "{{ hostvars[inventory_hostname].ansible_all_ipv4_addresses }}"

- name: get controller ip from all ips
  set_fact:
    listen_ip: "{{ item[0] }}"
  when: item[0] == item[1]
  with_nested:
    - "{{ hostvars[inventory_hostname].ansible_all_ipv4_addresses }}"
    - "{{ controller_list }}"

#- name: initialize k8s master with listen ip
#  shell: | 
#      kubeadm init --kubernetes-version v1.7.4 --apiserver-advertise-address {{ listen_ip }} &&
#      mkdir -p $HOME/.kube &&
#      cp -u /etc/kubernetes/admin.conf $HOME/.kube/config &&
#      chown -R $(id -u):$(id -g) $HOME/.kube
#  when: inventory_hostname == master and listen_ip is defined
#
#- name: initialize k8s master without listen ip
#  shell: |
#      kubeadm init --kubernetes-version v1.7.4 &&
#      mkdir -p $HOME/.kube &&
#      cp -u /etc/kubernetes/admin.conf $HOME/.kube/config &&
#      chown -R $(id -u):$(id -g) $HOME/.kube
#  when: inventory_hostname == master and listen_ip is undefined

- name: initialize k8s master with listen ip
  shell: | 
      kubeadm init --token-ttl 0 --kubernetes-version v1.9.2 --apiserver-advertise-address {{ listen_ip }} &&
      mkdir -p $HOME/.kube &&
      cp -u /etc/kubernetes/admin.conf $HOME/.kube/config &&
      chown -R $(id -u):$(id -g) $HOME/.kube
  when: listen_ip is defined

- name: initialize k8s master without listen ip
  shell: |
      kubeadm init --token-ttl 0 --kubernetes-version v1.9.2 &&
      mkdir -p $HOME/.kube &&
      cp -u /etc/kubernetes/admin.conf $HOME/.kube/config &&
      chown -R $(id -u):$(id -g) $HOME/.kube
  when: listen_ip is undefined

- name: get master token
  shell: kubeadm token list |grep "The default bootstrap token generated by 'kubeadm init'." |awk '{print $1}'
  register: output

- name: set master token
  set_fact:
    mastertoken: "{{ output.stdout }}"

- name: create /etc/contrail
  file:
    path: /etc/contrail
    state: directory
    recurse: yes

- name: create contrail kubemanager serviceaccount yaml
  template:
    src: contrail-kubemanager-serviceaccount.yaml.j2
    dest: /etc/contrail/contrail-kubemanager-serviceaccount.yaml

- name: excute contrail kubemanager serviceaccount yaml
  shell: kubectl apply -f /etc/contrail/contrail-kubemanager-serviceaccount.yaml

- name: get kubemanager token name from serviceaccount
  shell: kubectl describe sa contrail-kubemanager -n contrail  | grep -i 'Tokens' | awk '{print $2}'
  register: output

- name: get kubemanager token
  shell: kubectl describe secret "{{ output.stdout }}" -n contrail  | grep -i 'token:' | awk '{print $2}'
  register: output

- name: set kubemanager token
  set_fact:
    kubemanagertoken: "{{ output.stdout }}"

- debug:
    msg: "{{ kubemanagertoken }}"
