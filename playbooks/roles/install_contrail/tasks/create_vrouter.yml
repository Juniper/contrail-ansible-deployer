---
- name: "create /etc/contrail/vrouter"
  file:
    path: /etc/contrail/vrouter
    state: directory
    recurse: yes

- name: "get /etc/contrail/common_vrouter.env stat"
  stat:
    path: "/etc/contrail/common_vrouter.env"
  register: st

- name: "delete /etc/contrail/common_vrouter.env if exists"
  file:
    path: "/etc/contrail/common_vrouter.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists

- name: "create /etc/contrail/common_vrouter.env"
  file:
    path: "/etc/contrail/common_vrouter.env"
    state: touch

- name: "Parse qos niantic configuration"
  set_fact:
    priority_id_list: "{{ priority_id_list|default([]) + [ item.value.get('priority_id') ] }}"
    priority_scheduling_list: "{{ priority_scheduling_list|default([]) + [ item.value.get('scheduling') ] }}"
    priority_bandwidth_list: "{{ priority_bandwidth_list|default([]) + [ item.value.get('bandwidth') ] }}"
  with_dict: "{{ roles[instance_name].vrouter.qos_niantic }}"
  when:  roles[instance_name].vrouter.qos_niantic is defined

- name: "construct priority, scheduling and bandwidth dict"
  set_fact:
    priority_id_dict: "{{ priority_id_dict|default({})|combine({'PRIORITY_ID': priority_id_list|join(',')}) }}"
    priority_scheduling_dict: "{{ priority_scheduling_dict|default({})|combine({'PRIORITY_SCHEDULING': priority_scheduling_list|join(',')}) }}"
    priority_bandwidth_dict: "{{ priority_bandwidth_dict|default({})|combine({'PRIORITY_BANDWIDTH': priority_bandwidth_list|join(',') }) }}"
  when:
   - priority_id_list is defined
   - priority_scheduling_list is defined
   - priority_bandwidth_list is defined

- name: "construct qos niantic configuration dict"
  set_fact:
    qos_niantic_dict: "{{ qos_niantic_dict|default({})|combine(priority_id_dict, priority_scheduling_dict, priority_bandwidth_dict) }}"
  when:
    - priority_id_dict is defined
    - priority_scheduling_dict is defined
    - priority_bandwidth_dict is defined

- name: "Write qos niantic configuration to common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ qos_niantic_dict }}"
  when: qos_niantic_dict is defined
  ignore_errors: yes

- name: "Set priority tagging option for qos "
  set_fact:
    priority_tagging_dict: "{{ priority_tagging_dict|default({})|combine({'PRIORITY_TAGGING': roles[instance_name].vrouter.qos.priority_tagging }) }}"
  when:
    - roles[instance_name].vrouter.qos is defined
    - roles[instance_name].vrouter.qos.priority_tagging is defined

- name: "Parse qos queueing configuration"
  set_fact:
    qos_queue_id_list: "{{ qos_queue_id_list|default([]) + [ item.value.get('hardware_q_id') ] }}"
    qos_logical_queue_list: "{{ qos_logical_queue_list|default([]) + [ item.value.get('logical_queue') | to_yaml | replace('\n', '') ] }}"
  with_dict: "{{ roles[instance_name].vrouter.qos }}"
  when:
    - roles[instance_name].vrouter.qos is defined
    - " item.key  != 'default'"
    - " item.key != 'priority_tagging' "

- name: "Parse default queue qos configuration"
  set_fact:
    default_nic_queue: "{{ default_nic_queue|default({})|combine(item.value) }}"
    qos_queue_id_list: "{{ qos_queue_id_list + [ item.value.get('hardware_q_id') ] }}"
    default_hw_queue: True
  with_dict: "{{ roles[instance_name].vrouter.qos }}"
  when:
    - roles[instance_name].vrouter.qos is defined
    - " item.key == 'default'"
    - " item.key != 'priority_tagging' "

- name: "Parse logical queue mapping for default queue"
  set_fact:
    qos_logical_queue_list: "{{ qos_logical_queue_list + [ item.value | to_yaml | replace('\n', '') ] }}"
  with_dict: "{{ default_nic_queue }}"
  when:
    - default_nic_queue is defined
    - "item.key == 'logical_queue'"

- name: "construct dict for qos queue id"
  set_fact:
    queue_id_dict: "{{ queue_id_dict|default({})|combine({'QOS_QUEUE_ID': qos_queue_id_list | join(',')}) }}"
  when:
   - qos_queue_id_list is defined

- name: "construct dict for qos logical queues"
  set_fact:
    logical_queue_dict: "{{ logical_queue_dict|default({})|combine({'QOS_LOGICAL_QUEUES': qos_logical_queue_list | join(';')}) }}"
  when:
   - qos_logical_queue_list is defined

- name: "construct dict for qos queueing configuration"
  set_fact:
    qos_dict: "{{ qos_dict|default({})|combine(queue_id_dict, logical_queue_dict, priority_tagging_dict) }}"
  when:
   - queue_id_dict is defined
   - logical_queue_dict is defined

- name: "Set flag for qos default hardware queue"
  set_fact:
    qos_dict: "{{ qos_dict|combine({'QOS_DEF_HW_QUEUE': default_hw_queue} ) }}"
  when:
    - qos_dict is defined
    - default_hw_queue is defined

- name: "Write qos queueing configuration to common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ qos_dict }}"
  when: qos_dict is defined
  ignore_errors: yes

- name: "get pop"
  set_fact:
    location: "{{ roles[instance_name].vrouter.location }}"
  when: roles[instance_name].vrouter.location is defined

- name: "init pop control peer list"
  set_fact:
    pop_control_list: []
  when: location is defined

- name: "add pop control nodes to list"
  set_fact:
    pop_control_list: "{{ pop_control_list + [ instances[item.key].ip ] }}"
  when: location is defined and item.value.control is defined and item.value.control.location is defined and item.value.control.location == location
  with_dict: "{{ roles }}"
  ignore_errors: yes

- name: "create controler host list if not defined"
  set_fact:
    pop_control_nodes: "{{ pop_control_list|join(',') }}"
  when: pop_control_list is defined

- name: "create contrail_configuration.CONTROL_NODES"
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'CONTROL_NODES': pop_control_nodes}) }}"
  when: pop_control_nodes is defined and roles[instance_name].vrouter.CONTROL_NODES is undefined

- name: "set DNS servers if location is defined"
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'DNS_NODES': contrail_configuration.CONTROLLER_NODES}) }}"
  when: pop_control_nodes is defined and roles[instance_name].vrouter.DNS_NODES is undefined

- name: "populate cluster wide common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"

- name: "populate instance specific common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ instances[instance_name].contrail_configuration }}"
  when: instances[instance_name].contrail_configuration is defined
  ignore_errors: yes

- name: "populate pod specific common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ roles[instance_name].vrouter }}"
  when:
   - item.key != 'qos'
   - item.key != 'qos_niantic'
  ignore_errors: yes

- name: "populate pop settings"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ remote_locations[location] }}"
  when: location is defined

- name: "add kubemanager token to common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^K8S_TOKEN=.*' line="K8S_TOKEN={{ hostvars[master_inventory].kubemanagertoken }}" state=present
  when: master_inventory is defined and hostvars[master_inventory].kubemanagertoken is defined

- name: "add SUBCLUSTER name if location is defined and subcluster name is defined"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^SUBCLUSTER=.*' line="SUBCLUSTER={{ remote_locations[location].SUBCLUSTER }}" state=present
  when: location is defined and remote_locations[location].SUBCLUSTER is defined

- name: "add SUBCLUSTER name if location is defined and subcluster name is undefined"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^SUBCLUSTER=.*' line="SUBCLUSTER={{ location }}" state=present
  when: location is defined and remote_locations[location].SUBCLUSTER is undefined

- name: "update image"
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-nodemgr
    - contrail-vrouter-kernel-init
    - contrail-vrouter-agent
  when:
    - UPDATE_IMAGES is undefined or UPDATE_IMAGES != false
    - roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: "create contrail vrouter compose file"
  template:
    src: contrail-vrouter.yaml.j2
    dest: "/etc/contrail/vrouter/docker-compose.yaml"
  when: roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: "start contrail vrouter"
  docker_service:
    project_src: /etc/contrail/vrouter
  when: roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: update image for dpdk vrouter
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-node-init
    - contrail-nodemgr
    - contrail-vrouter-kernel-init-dpdk
    - contrail-vrouter-agent-dpdk
    - contrail-vrouter-agent
  when:
    - UPDATE_IMAGES is undefined or UPDATE_IMAGES != false
    - roles[instance_name].vrouter.AGENT_MODE is defined
    - roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "create contrail dpdk vrouter compose file"
  template:
    src: contrail-vrouter-dpdk.yaml.j2
    dest: "/etc/contrail/vrouter/docker-compose.yaml"
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "start contrail dpdk vrouter"
  docker_service:
    project_src: /etc/contrail/vrouter
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'


- name: "create /var/log/contrail/lbaas"
  file:
    path: /var/log/contrail/lbaas
    state: directory
    recurse: yes

- name: "install rsyslogd"
  yum:
    name: rsyslog
    state: present

- name: "configure rsyslogd"
  shell: "echo '$AddUnixListenSocket /var/log/contrail/lbaas/haproxy.log.sock' > /etc/rsyslog.d/contrail-lbaas-haproxy.conf"

- name: "restart rsyslogd"
  service:
    name: rsyslog
    state: restarted
