---
- name: update image
  shell: "docker pull {{ container_registry }}/contrail-status:{{ contrail_version_tag }}"
  when: UPDATE_IMAGES is undefined or UPDATE_IMAGES != false

- name: "get /etc/contrail/common_status.env stat"
  stat:
    path: "/etc/contrail/common_status.env"
  register: st

- name: "delete /etc/contrail/common_status.env if exists"
  file:
    path: "/etc/contrail/common_status.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists

- name: "create /etc/contrail/common_status.env"
  file:
    path: "/etc/contrail/common_status.env"
    state: touch

- name: "populate global common_status.env"
  lineinfile: dest=/etc/contrail/common_status.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"

- name: "populate instance specific common_status.env"
  lineinfile: dest=/etc/contrail/common_status.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ instances[instance_name].contrail_configuration }}"
  when: instances[instance_name].contrail_configuration is defined
  ignore_errors: yes

- name: "populate pod specific common_status.env"
  lineinfile: dest=/etc/contrail/common_status.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ roles[instance_name].status }} | default ({})"
  when: roles[instance_name].status is defined
  ignore_errors: yes

- name: run contrail-status container once
  docker:
    name: contrail-status
    image: "{{ container_registry }}/contrail-status:{{ contrail_version_tag }}"
    state: started
    volumes:
    - /etc/contrail:/etc/contrail
    - /usr/bin:/usr/bin
    - /var/run/docker.sock:/var/run/docker.sock
    pid: host
    net: host
    privileged: yes

- name: remove contrail-status stopped container
  docker:
    name: contrail-status
    image: "{{ container_registry }}/contrail-status:{{ contrail_version_tag }}"
    state: absent
