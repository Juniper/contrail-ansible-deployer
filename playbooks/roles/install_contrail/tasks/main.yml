---
- name: set instance data
  set_fact:
    instance_data: "{{ instances[hostvars[inventory_hostname].instance_name] }}"
  tags:
   - always

- name: set instance name
  set_fact:
    instance_name: "{{ hostvars[inventory_hostname].instance_name }}"
  tags:
   - always

- name: set contrail configuration param
  set_fact:
   contrail_configuration: {}
  when: contrail_configuration is undefined
  tags:
   - always

- name: set orchestrator param
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'CLOUD_ORCHESTRATOR': orchestrator}) }}"
  when:
    - orchestrator is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR is not defined
  tags:
   - always

- name: set KEYSTONE_AUTH_ADMIN_PASSWORD
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'KEYSTONE_AUTH_ADMIN_PASSWORD': kolla_config.kolla_passwords.keystone_admin_password }) }}"
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
    - kolla_config is defined
    - kolla_config.kolla_passwords is defined
    - kolla_config.kolla_passwords.keystone_admin_password is defined
  tags:
   - always

- name: set container tag contrail version to master if not defined
  set_fact:
    contrail_version_tag: latest
  when: contrail_configuration.CONTRAIL_VERSION is undefined
  tags:
   - always

- name: set container tag contrail version if defined
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.CONTRAIL_VERSION }}"
  when: contrail_configuration.CONTRAIL_VERSION is defined
  tags:
   - always

- name: add openstack version tag if defined
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.OPENSTACK_VERSION }}-{{ contrail_version_tag }}"
  when: contrail_configuration.OPENSTACK_VERSION is defined
  tags:
   - always

- name: add linux distr tag if defined
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_version_tag }}"
  when: contrail_configuration.LINUX_DISTR is defined
  tags:
   - always

- name: set registry to opencontrailnightly if undefined
  set_fact:
    container_registry: opencontrailnightly
  when: contrail_configuration.CONTAINER_REGISTRY is undefined
  tags:
   - always

- name: set registry if defined
  set_fact:
    container_registry: "{{ contrail_configuration.CONTAINER_REGISTRY }}"
  when: contrail_configuration.CONTAINER_REGISTRY is defined
  tags:
   - always

- set_fact:
    default_roles: "{{ default_roles|default({})|combine({item.0: item.1}) }}"
  with_together:
    - ['analytics', 'analytics_database', 'config', 'config_database', 'control', 'vrouter', 'webui']
    - []
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is undefined
  tags:
   - always

- set_fact:
    default_roles: "{{ default_roles|default({})|combine({item.0: item.1}) }}"
  with_together:
    - ['analytics', 'analytics_database', 'config', 'config_database', 'control', 'k8s_master', 'k8s_node', 'vrouter', 'webui']
    - []
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'kubernetes'
  tags:
   - always

- set_fact:
    default_roles: "{{ default_roles|default({})|combine({item.0: item.1}) }}"
  with_together:
    - ['analytics', 'analytics_database', 'config', 'config_database', 'control', 'vrouter', 'webui', 'openstack']
    - []
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack'
  tags:
   - always

- set_fact:
    default_roles: "{{ default_roles|default({})|combine({item.0: item.1}) }}"
  with_together:
    - ['analytics', 'analytics_database', 'config', 'config_database', 'control', 'vrouter', 'webui', 'vcenter_plugin']
    - []
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR is defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'vcenter'
  tags:
   - always

- set_fact:
    default_roles_hosts: {}
  tags:
   - always

- name: add roles if not defined
  set_fact:
     default_roles_hosts: "{{ default_roles_hosts|combine({item.key: default_roles}, recursive=True) }}"
  when: item.value.roles is undefined
  with_dict: "{{ instances }}"
  tags:
   - always

- name: add roles if defined
  set_fact:
     default_roles_hosts: "{{ default_roles_hosts|combine({item.key: item.value.roles}, recursive=True) }}"
  when: item.value.roles is defined
  with_dict: "{{ instances }}"
  tags:
   - always

- debug:
    msg: "default_roles {{ default_roles_hosts }}"
  tags:
   - always

- name: set roles if not defined
  set_fact:
    roles: "{{ default_roles_hosts }}"
  when: default_roles_hosts is defined
  tags:
   - always

- set_fact:
    controller_list: []
  tags:
   - always

- name: get gce controllers
  include: get_gce_controller.yml
#  set_fact:
#    controller_list: "{{ controller_list + [ hostvars[item.key].private_ip ] }}"
  when: item.value.config is defined and instances[item.key].provider == 'gce'
  with_dict: "{{ roles }}"
  tags:
   - always

- name: get aws controllers
  include: get_aws_controller.yml
  when: item.value.config is defined and instances[item.key].provider == 'aws'
  with_dict: "{{ roles }}"
  tags:
   - always

- name: add kvm controllers to the list
  set_fact:
    controller_list: "{{ controller_list + [ instances[item.key].ip ] }}"
  when: item.value.config is defined and instances[item.key].provider == 'kvm'
  with_dict: "{{ roles }}"
  tags:
   - always

- name: add bms controllers to the list
  set_fact:
    controller_list: "{{ controller_list + [ instances[item.key].ip ] }}"
  when: item.value.config is defined and instances[item.key].provider == 'bms'
  with_dict: "{{ roles }}"
  tags:
   - always

- debug:
    msg: "{{ controller_list }}"
  tags:
   - always
  
- name: create controller host list if not defined
  set_fact:
    controller: "{{ controller_list|join(',') }}"
  when: contrail_configuration.CONTROLLER_NODES is undefined
  tags:
   - always

- name: create contrail_configuration.CONTROLLER_NODES
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'CONTROLLER_NODES': controller}) }}"
  when: contrail_configuration.CONTROLLER_NODES is undefined
  tags:
   - always

- set_fact:
    openstack_controller_list: []
  tags:
   - always

- name: add openstack controllers to the list
  set_fact:
    openstack_controller_list: "{{ openstack_controller_list + [ hostvars[item]['private_ip'] ] }}"
  when: hostvars[item]['instance_data']['roles'].openstack is defined or hostvars[item]['instance_data']['roles'].openstack_control is defined
  with_items: "{{ groups['container_hosts'] }}"

- name: set KEYSTONE_AUTH_HOST
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'KEYSTONE_AUTH_HOST': openstack_controller_list[0] }) }}"
  when:
    - contrail_configuration.KEYSTONE_AUTH_HOST is not defined
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'openstack' and openstack_controller_list|length > 0
  tags:
   - always

- name: create /var/log/contrail
  file:
    path: /var/log/contrail
    state: directory
    recurse: yes
  tags:
   - always

- name: create /etc/contrail/compose
  file:
    path: /etc/contrail/compose
    state: directory
    recurse: yes
  tags:
   - always

- name: get /etc/contrail/common.env stat
  stat:
    path: /etc/contrail/common.env
  register: st
  tags:
   - always

- name: delete /etc/contrail/common.env if exists
  file:
    path: /etc/contrail/common.env
    state: absent
  when: st.stat.exists is defined and st.stat.exists
  tags:
   - always

- name: create /etc/contrail/common.env
  file:
    path: /etc/contrail/common.env
    state: touch
  tags:
   - always

- name: populate common.env
  lineinfile: dest=/etc/contrail/common.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  tags:
   - always

- name: create contrail config datqbase
  include: create_config_database.yml
  when: roles[instance_name].config_database is defined
  tags:
    - config_database

- name: create contrail config
  include: create_config.yml
  when: roles[instance_name].config is defined
  tags:
    - config

- name: create contrail webui
  include: create_webui.yml
  when: roles[instance_name].webui is defined
  tags:
    - webui

- name: create contrail control
  include: create_control.yml
  when: roles[instance_name].control is defined
  tags:
   - control

- name: create contrail control_only
  include: create_control_only.yml
  when: roles[instance_name].control_only is defined
  tags:
    - control_only

- name: create contrail analytics database
  include: create_analytics_database.yml
  when: roles[instance_name].analytics_database is defined
  tags:
    - analytics_database

- name: create contrail analytics
  include: create_analytics.yml
  when: roles[instance_name].analytics is defined
  tags:
    - analytics

- name: create contrail vrouter
  include: create_vrouter.yml
  when: roles[instance_name].vrouter is defined
  tags:
    - vrouter

- name: create contrail vcenter-plugin
  include: create_vcenter_plugin.yml
  when:
    - contrail_configuration.CLOUD_ORCHESTRATOR == 'vcenter'
    - roles[instance_name].vcenter_plugin is defined
  tags:
    - vcenter_plugin

- name: create contrail status
  include: create_status.yml
  tags:
    - status

- name: init master list
  set_fact:
    master_list: []
  tags:
    - k8s

- name: init master inventory list
  set_fact:
    master_inventory_list: []
  tags:
    - k8s

- name: set master
  include: set_master.yml
  with_items:
    - "{{ controller_list }}"
  loop_control:
    loop_var: controller_item
  when: roles[instance_name].k8s_master is defined or roles[instance_name].k8s_node is defined
  tags:
    - k8s

- name: create cni
  include: create_k8s_cni.yml
  when: roles[instance_name].k8s_node is defined
  tags:
    - k8s

- name: configure k8s master
  include: configure_k8s_master_node.yml
  when: roles[instance_name].k8s_master is defined and master_inventory is defined and inventory_hostname == master_inventory
  tags:
    - k8s

- name: join k8s master
  include: configure_k8s_join_node.yml
  when: roles[instance_name].k8s_node is defined and master_inventory is defined and inventory_hostname != master_inventory
  tags:
    - k8s

- name: create contrail kube manager
  include: create_kubemanager.yml
  when: roles[instance_name].k8s_master is defined
  tags:
    - k8s
