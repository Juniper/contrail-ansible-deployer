---
- name: set instance data
  set_fact:
    instance_data: "{{ instances[hostvars[inventory_hostname].instance_name] }}"
  tags:
   - always

- debug:
    msg: "{{ instances[hostvars[inventory_hostname].instance_name] }}"

- name: set instance name
  set_fact:
    instance_name: "{{ hostvars[inventory_hostname].instance_name }}"
  tags:
   - always

- name: copy contrail_configuration from localhost
  set_fact:
    contrail_configuration: "{{ hostvars['localhost'].contrail_configuration }}"

- name: create host entry dict
  set_fact:
    host_intf_dict: "{{ instances|ctrl_data_intf_dict(contrail_configuration, kolla_config if kolla_config is defined else {}, hostvars) }}"
  when:
    - hostvars['localhost'].CONTROL_DATA_NET_LIST is defined

- debug:
    msg: "DEBUG {{ host_intf_dict }}"
  when:
    - hostvars['localhost'].CONTROL_DATA_NET_LIST is defined
  tags:
   - always

# TODO: Rework the CONTROL_DATA_NET_LIST to conform to new structures

- name: get the final kolla configurations
  set_fact:
    final_kolla_configs: "{{ hostvars[item.value.ip].final_kolla_globals }}"
  with_dict: "{{ instances }}"
  when:
    - hostvars['localhost'].CLOUD_ORCHESTRATOR == 'openstack'
    - item.value is defined
    - item.value.ip is defined
    - hostvars[item.value.ip].final_kolla_globals is defined
  tags:
   - always

- name: set KEYSTONE_AUTH_HOST from derived kolla parameters
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'KEYSTONE_AUTH_HOST': final_kolla_configs.kolla_internal_vip_address }) }}"
  when:
    - contrail_configuration.KEYSTONE_AUTH_HOST is not defined
    - hostvars['localhost'].CLOUD_ORCHESTRATOR == 'openstack'
    - final_kolla_configs is defined
    - final_kolla_configs.kolla_internal_vip_address is defined
  tags:
   - always

- name: set KEYSTONE_AUTH_HOST from kolla_config.kolla_globals
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'KEYSTONE_AUTH_HOST': kolla_config.kolla_globals.kolla_internal_vip_address }) }}"
  when:
    - contrail_configuration.KEYSTONE_AUTH_HOST is not defined
    - hostvars['localhost'].CLOUD_ORCHESTRATOR == 'openstack'
    - kolla_config is defined
    - kolla_config.kolla_globals is defined
    - kolla_config.kolla_globals.kolla_internal_vip_address is defined
  tags:
   - always

- name: set stdin_open variable
  set_fact:
    stdin_open: "{{ contrail_configuration.STDIN_OPEN }}"

- name: set container_registry variable
  set_fact:
    container_registry: "{{ contrail_configuration.CONTAINER_REGISTRY }}"

- name: contrail_version_tag variable
  set_fact:
    contrail_version_tag: "{{ contrail_configuration.CONTRAIL_VERSION_TAG }}"

- name: set tty variable
  set_fact:
    tty: "{{ contrail_configuration.TTY }}"

- name: create /var/log/contrail
  file:
    path: /var/log/contrail
    state: directory
    recurse: yes
  tags:
   - always

- name: create /etc/contrail/compose
  file:
    path: /etc/contrail/compose
    state: directory
    recurse: yes
  tags:
   - always

- name: get /etc/contrail/common.env stat
  stat:
    path: /etc/contrail/common.env
  register: st
  tags:
   - always

- name: delete /etc/contrail/common.env if exists
  file:
    path: /etc/contrail/common.env
    state: absent
  when: st.stat.exists is defined and st.stat.exists
  tags:
   - always

- name: create /etc/contrail/common.env
  file:
    path: /etc/contrail/common.env
    state: touch
  tags:
   - always

- name: populate common.env
  lineinfile: dest=/etc/contrail/common.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  tags:
   - always

- name: create contrail config database
  include: create_config_database.yml
  when: "'config_database' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - config_database

- name: create contrail config
  include: create_config.yml
  when: "'config' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - config

- name: create contrail webui
  include: create_webui.yml
  when: "'webui' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - webui

- name: create contrail control
  include: create_control.yml
  when: "'control' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
   - control

- name: create contrail control_only
  include: create_control_only.yml
  when: "'control_only' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - control_only

- name: create contrail analytics database
  include: create_analytics_database.yml
  when: "'analytics_database' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - analytics_database

- name: create contrail analytics
  include: create_analytics.yml
  when: "'analytics' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - analytics

- name: create cni
  include: create_k8s_cni.yml
  when: "'k8s_node' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - k8s

- name: create contrail vrouter
  include: create_vrouter.yml
  when: "'vrouter' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - vrouter

- name: create contrail kube manager
  include: create_kubemanager.yml
  when: "'kubemanager' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - k8s

- name: create contrail vcenter-plugin
  include: create_vcenter_plugin.yml
  when: "'vcenter_plugin' in hostvars['localhost']['instance_to_role_dict'][instance_name]"
  tags:
    - vcenter_plugin
