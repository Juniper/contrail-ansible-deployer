---

- name: extract docker-driver MSI from container
  win_shell: >
    docker run -v {{ win_host_artifacts_dir }}:{{ win_container_artifacts_dir }}
    {{ global_configuration.WINDOWS_CONTAINER_REGISTRY }}/contrail-windows-docker-driver:{{ contrail_configuration.CONTRAIL_VERSION }}

- name: install docker-driver
  win_package:
    path: '{{ win_host_artifacts_dir }}\docker-driver\docker-driver.msi'

- name: construct basic argument list for docker-driver
  set_fact:
    docker_driver_args:
      - '-controllerIP {{ contrail_configuration.CONFIG_NODES }}'
      - '-adapter "{{ contrail_configuration.WINDOWS_PHYSICAL_INTERFACE }}"'
      - '-logLevel Debug'
      - '-authMethod {{ contrail_configuration.AUTH_MODE }}'

- name: add keystone args if needed
  set_fact:
    docker_driver_args: >
      {{ docker_driver_args }} + [
      '-os_username {{ contrail_configuration.KEYSTONE_AUTH_ADMIN_TENANT }}',
      '-os_password {{ contrail_configuration.KEYSTONE_AUTH_ADMIN_PASSWORD }}',
      '-os_auth_url {{ contrail_configuration.KEYSTONE_AUTH_PROTO }}://{{ contrail_configuration.KEYSTONE_AUTH_HOST }}:{{ contrail_configuration.KEYSTONE_AUTH_PUBLIC_PORT }}{{ contrail_configuration.KEYSTONE_AUTH_URL_VERSION }}',
      '-os_tenant_name {{ contrail_configuration.KEYSTONE_AUTH_ADMIN_TENANT }}']
  when: contrail_configuration.AUTH_MODE == 'keystone'

# We divide creation and start of Docker Driver service, because sometimes win_nssm
# won't start it. It's a bug in win_nssm module. It should be fixed in Ansible 2.7.
# TODO: When the bug is fixed, merge these two tasks into one.
- name: create docker-driver service
  win_nssm:
    name: contrail-docker-driver
    application: C:\Program Files\Juniper Networks\contrail-windows-docker.exe
    state: present
    app_parameters_free_form: "{{ docker_driver_args | join(' ') }}"

# NOTE: Errors are ignored, because in case of single interface deployment, after Docker Driver
# service is started Ansible might lose connectivity for a moment due to vRouter being enabled.
# Following tasks wait for reconnection and check whether service has started.
- name: start docker-driver service
  win_service:
    name: contrail-docker-driver
    state: started
    start_mode: auto
  ignore_errors: yes

- name: wait for connection after creating vswitch
  wait_for_connection:
    delay: 10

# TODO: It should be investigated if win_stat is a more elegant solution.
- name: wait for docker driver startup
  win_shell: '[System.IO.File]::Exists("\\.\pipe\Contrail")'
  register: docker_driver_pipe
  until: docker_driver_pipe.stdout_lines[0] == "True"
  retries: 5
  delay: 20

# TODO: Agent configuration should be created only if docker driver has been restared
- name: fetch network adapters information
  register: adapters_raw
  win_shell: |
    $ErrorActionPreference = "Stop"
    $PhysicalAdapter = Get-NetAdapter -Name "{{ contrail_configuration.WINDOWS_PHYSICAL_INTERFACE }}"
    $VHostAdapter = Get-NetAdapter -Name "{{ win_vhost_name }}"
    $VHostIP = $VHostAdapter | Get-NetIPAddress -AddressFamily IPv4
    $VHostGateway = ($VHostAdapter | Get-NetIPConfiguration).IPv4DefaultGateway
    @{
      physical = @{
        interface_name = $PhysicalAdapter.ifName
      }
      vhost = @{
        interface_name = $VHostAdapter.ifName
        ip = $VHostIP.IPAddress
        ip_mask_length = $VHostIP.PrefixLength
        gateway = if ($VHostGateway) { $VHostGateway.NextHop } else { $null }
      }
    } | ConvertTo-Json

- name: parse network adapters information
  set_fact:
    adapters: "{{ adapters_raw.stdout | from_json }}"

- name: create vrouter-agent configuration file
  win_template:
    src: templates/contrail-vrouter-agent.conf.j2
    dest: "{{ win_agent_config_path }}"
    newline_sequence: "\r\n"
  register: agent_config

- name: restart vrouter-agent service in case of config change
  win_service:
    name: ContrailAgent
    state: restarted
  when: agent_config.changed

- name: make sure vrouter-agent service is running
  win_service:
    name: ContrailAgent
    state: started
