---
- name: create /etc/contrail/kubemanager
  file:
    path: /etc/contrail/kubemanager
    state: directory
    recurse: yes

- name: "get /etc/contrail/common_kubemanager.env stat"
  stat:
    path: "/etc/contrail/common_kubemanager.env"
  register: st

- name: "delete /etc/contrail/common_kubemanager.env if exists"
  file:
    path: "/etc/contrail/common_kubemanager.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists

- name: "create /etc/contrail/common_kubemanager.env"
  file:
    path: "/etc/contrail/common_kubemanager.env"
    state: touch

- name: "populate global common_kubemanager.env"
  lineinfile: dest=/etc/contrail/common_kubemanager.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"

- name: "populate instance specific common_kubemanager.env"
  lineinfile: dest=/etc/contrail/common_kubemanager.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ instances[instance_name].contrail_configuration }}"
  when: instances[instance_name].contrail_configuration is defined
  ignore_errors: yes

- name: "populate pod specific common_kubemanager.env"
  lineinfile: dest=/etc/contrail/common_kubemanager.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ roles[instance_name].kubemanager }} | default ({})"
  when: roles[instance_name].kubemanager is defined
  ignore_errors: yes

- name: update image
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-kubernetes-kube-manager
  when: UPDATE_IMAGES is undefined or UPDATE_IMAGES != false

- name: create contrail kubemanager compose file
  template:
    src: contrail-kubemanager.yaml.j2
    dest: /etc/contrail/kubemanager/docker-compose.yaml

- name: start contrail kubemanager
  docker_service:
    project_src: /etc/contrail/kubemanager
