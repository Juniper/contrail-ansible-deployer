---
- name: "get /tmp/common_control_only_{{ location.key }}.env stat"
  stat:
    path: "/tmp/common_control_only_{{ location.key }}.env"
  register: st

- name: "delete /tmp/common_control_only_{{ location.key }}.env if exists"
  file:
    path: "/tmp/common_control_only_{{ location.key }}.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists and CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "create /tmp/common_control_only_{{ location.key }}.env"
  file:
    path: "/tmp/common_control_only_{{ location.key }}.env"
    state: touch
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "populate cluster wide common_control_only_{{ location.key }}.env"
  lineinfile: dest=/tmp/common_control_only_{{ location.key }}.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "populate pod specific common_control_only_{{ location.key }}.env"
  lineinfile: dest=/tmp/common_control_only_{{ location.key }}.env regexp='.*{{ config_item.key }}$' line="{{ config_item.key }}={{ config_item.value }}" state=present
  with_dict: "{{ location.value }}"
  loop_control:
    loop_var: config_item
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: calculate XMPP port if not assigned
  set_fact:
    xmpp_port: "{{ location.value.CLUSTER_ID|int + 15268 }}" 
  when: location.value.XMPP_SERVER_PORT is undefined

- name: set XMPP_SERVER_PORT port if assigned
  set_fact:
    xmpp_port: "{{ location.value.XMPP_SERVER_PORT }}"
  when: location.value.XMPP_SERVER_PORT is defined

- name: "add XMPP_SERVER_PORT to common_control_only_{{ location.key }}.env"
  lineinfile: dest=/tmp/common_control_only_{{ location.key }}.env regexp='.*XMPP_SERVER_PORT$' line="XMPP_SERVER_PORT={{ xmpp_port }}" state=present
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: calculate BGP port if not assigned
  set_fact:
    bgp_port: "{{ location.value.CLUSTER_ID|int + 11178 }}"
  when: location.value.BGP_PORT is undefined

- name: set BGP port if assigned
  set_fact:
   bgp_port: "{{ location.value.BGP_PORT }}"
  when: location.value.BGP_PORT is defined

- name: "add BGP_PORT to common_control_only_{{ location.key }}.env"
  lineinfile: dest=/tmp/common_control_only_{{ location.key }}.env regexp='.*BGP_PORT$' line="BGP_PORT={{ bgp_port }}" state=present
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: calculate control introspect port
  set_fact:
    introspect_port: "{{ location.value.CLUSTER_ID|int + 18082 }}"

- name: "add control introspect to common_control_only_{{ location.key }}.env"
  lineinfile: dest=/tmp/common_control_only_{{ location.key }}.env regexp='.*CONTROL_INTROSPECT_LISTEN_PORT$' line="CONTROL_INTROSPECT_LISTEN_PORT={{ introspect_port }}" state=present
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

#- name: "add xmpp port to kv store"
#  consul_kv:
#    key: "{{ location.key }}/cns/{{ location.value.CLUSTER_ID }}/xmpp"
#    value: "{{ xmpp_port }}"

#- name: "add xmpp port to kv store"
#  consul_kv:
#    key: "{{ location.key }}/cns/{{ location.value.CLUSTER_ID }}/bgp"
#    value: "{{ bgp_port }}"

- name: "start contrail control {{ location.key }}"
  docker_service:
    project_name: contrail-control-only-{{ location.key }}
    pull: yes
    definition:
      version: '2'
      services:
        network:
          image: docker.io/kubernetes/pause
          network_mode: "host"
          volumes:
           - /etc/hosts:/etc/hosts
        nodemgr:
          image: "{{ CONTAINER_REGISTRY }}/contrail-nodemgr:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          env_file: /tmp/common.env
          environment:
            - NODE_TYPE=control
          network_mode: "service:network"
          volumes:
            - /var/log/contrail:/var/log/contrail
            - /var/run/docker.sock:/var/run/docker.sock
          depends_on:
            - network
          restart: on-failure
        control:
          image: "{{ CONTAINER_REGISTRY }}/contrail-controller-control-control:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: "service:network"
          env_file: "/tmp/common_control_only_{{ location.key }}.env"
          #  - /tmp/common.env
          #  - "/tmp/common.env_{{ location.key }}"
          #environment:
          #  - BGP_AUTO_MESH=false
          #  - BGP_PORT={{ bgp_port }}
          #  - XMPP_SERVER_PORT={{ xmpp_port }}
          volumes:
            - /var/log/contrail:/var/log/contrail
          depends_on:
            - network
          restart: on-failure
