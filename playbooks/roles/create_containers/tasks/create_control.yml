---
- name: "get /tmp/common_control.env stat"
  stat:
    path: "/tmp/common_control.env"
  register: st

- name: "delete /tmp/common_control.env if exists"
  file:
    path: "/tmp/common_control.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists and CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "create /tmp/common_control.env"
  file:
    path: "/tmp/common_control.env"
    state: touch
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "populate cluster wide common_control.env"
  lineinfile: dest=/tmp/common_control.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "populate pod specific common_control.env"
  lineinfile: dest=/tmp/common_control.env regexp='.*{{ config_item.key }}$' line="{{ config_item.key }}={{ config_item.value }}" state=present
  with_dict: "{{ roles[inventory_hostname].control }}"
  loop_control:
    loop_var: config_item
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true
  ignore_errors: yes

- name: start contrail control
  docker_service:
    project_name: contrail-control
    pull: yes
    definition:
      version: '2'
      services:
        network:
          image: docker.io/kubernetes/pause
          network_mode: "host"
          volumes:
           - /etc/hosts:/etc/hosts
        nodemgr:
          image: "{{ CONTAINER_REGISTRY }}/contrail-nodemgr:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          env_file: /tmp/common_control.env
          environment:
            - NODE_TYPE=control
          network_mode: "service:network"
          volumes:
            - /var/log/contrail:/var/log/contrail
            - /var/run/docker.sock:/var/run/docker.sock
          depends_on:
            - network
          restart: on-failure
        control:
          image: "{{ CONTAINER_REGISTRY }}/contrail-controller-control-control:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: "service:network"
          env_file: /tmp/common_control.env
          volumes:
            - /var/log/contrail:/var/log/contrail
          depends_on:
            - network
          restart: on-failure
        named:
          image: "{{ CONTAINER_REGISTRY }}/contrail-controller-control-named:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: "service:network"
          env_file: /tmp/common_control.env
          privileged: true
          #volumes:
          #  - /var/log/contrail:/var/log/contrail
          volumes_from:
            - dns
          depends_on:
            - network
            - dns
          restart: on-failure
        dns:
          image: "{{ CONTAINER_REGISTRY }}/contrail-controller-control-dns:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: "service:network"
          env_file: /tmp/common_control.env
          volumes:
            - /var/log/contrail:/var/log/contrail
            - /etc/contrail
          depends_on:
            - network
          restart: on-failure
