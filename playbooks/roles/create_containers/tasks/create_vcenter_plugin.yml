---
- name: create /etc/contrail/vcenter-plugin
  file:
    path: /etc/contrail/vcenter-plugin
    state: directory
    recurse: yes

- name: set vcenter url if defined
  set_fact:
    vcenter_server: "{{ contrail_configuration.VCENTER_SERVER }}"
  when: contrail_configuration.VCENTER_SERVER is defined

- name: set vcenter username if defined
  set_fact:
    vcenter_username: "{{ contrail_configuration.VCENTER_USERNAME }}"
  when: contrail_configuration.VCENTER_USERNAME is defined

- name: set vcenter password if defined
  set_fact:
    vcenter_password: "{{ contrail_configuration.VCENTER_PASSWORD }}"
  when: contrail_configuration.VCENTER_PASSWORD is defined

- name: set vcenter datacenter if defined
  set_fact:
    vcenter_datacenter: "{{ contrail_configuration.VCENTER_DATACENTER }}"
  when: contrail_configuration.VCENTER_DATACENTER is defined

- name: set vcenter dvswitch if defined
  set_fact:
    vcenter_dvswitch: "{{ contrail_configuration.VCENTER_DVSWITCH }}"
  when: contrail_configuration.VCENTER_DVSWITCH is defined

- name: set vcenter ipfabric if defined
  set_fact:
    vcenter_ipfabric: "{{ contrail_configuration.VCENTER_IPFABRIC }}"
  when: contrail_configuration.VCENTER_IPFABRIC is defined

- name: set vcenter-plugin introspect port
  set_fact:
    vcenter_introscpect_port: "{{ contrail_configuration.VCENTER_INTROSCPECT_PORT }}"
  when: contrail_configuration.VCENTER_INTROSCPECT_PORT is defined

- name: "get /etc/contrail/common_vcplugin.env stat"
  stat:
    path: "/etc/contrail/common_vcplugin.env"
  register: st

- name: "delete /etc/contrail/common_vcplugin.env if exists"
  file:
    path: "/etc/contrail/common_vcplugin.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists

- name: "create /etc/contrail/common_vcplugin.env"
  file:
    path: "/etc/contrail/common_vcplugin.env"
    state: touch

- name: "populate cluster wide common_vcplugin.env"
  lineinfile: dest=/etc/contrail/common_vcplugin.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"

- name: "populate pod specific common_vcplugin.env"
  lineinfile: dest=/etc/contrail/common_vcplugin.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ roles[inventory_hostname].vcenter_plugin }} | default ({})"
  when: roles[inventory_hostname].vcenter_plugin.key is defined
  ignore_errors: yes

- name: update image
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-nodemgr
    - contrail-vcenter-plugin
  when: UPDATE_IMAGES is undefined or UPDATE_IMAGES != false

- name: create contrail vcenter-plugin file
  template:
    src: contrail-vcenter-plugin.yaml.j2
    dest: /etc/contrail/vcenter-plugin/docker-compose.yaml

- name: start contrail vcenter-plugin 
  docker_service:
    project_src: /etc/contrail/vcenter-plugin

