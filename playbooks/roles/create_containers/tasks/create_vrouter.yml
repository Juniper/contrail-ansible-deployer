---
- name: "get /tmp/common_vrouter.env stat"
  stat:
    path: "/tmp/common_vrouter.env"
  register: st

- name: "delete /tmp/common_vrouter.env if exists"
  file:
    path: "/tmp/common_vrouter.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists and CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "create /tmp/common_vrouter.env"
  file:
    path: "/tmp/common_vrouter.env"
    state: touch
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "populate cluster wide common_vrouter.env"
  lineinfile: dest=/tmp/common_vrouter.env regexp='.*{{ item.key }}$' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true

- name: "populate pod specific common_vrouter.env"
  lineinfile: dest=/tmp/common_vrouter.env regexp='.*{{ config_item.key }}$' line="{{ config_item.key }}={{ config_item.value }}" state=present
  with_dict: "{{ roles[inventory_hostname].vrouter }}"
  loop_control:
    loop_var: config_item
  when: CREATE_CONTAINERS is defined and CREATE_CONTAINERS==true
  ignore_errors: yes

- name: get pop
  set_fact:
    pop: "{{ roles[inventory_hostname].vrouter.location }}"
  when: roles[inventory_hostname].vrouter.location is defined

- name: "populate pop settings"
  lineinfile: dest=/tmp/common_vrouter.env regexp='.*{{ pop_config.key }}$' line="{{ pop_config.key }}={{ pop_config.value }}" state=present
  with_dict: "{{ remote_locations[pop] }}"
  loop_control:
    loop_var: pop_config
  when: pop is defined

- name: calculate XMPP port if not assigned
  set_fact:
    xmpp_port: "{{ remote_locations[pop].CLUSTER_ID|int + 15268 }}"
  when: pop is defined and remote_locations[pop].XMPP_SERVER_PORT is undefined

- name: set XMPP_SERVER_PORT port if assigned
  set_fact:
    xmpp_port: "{{ remote_locations[pop].XMPP_SERVER_PORT }}"
  when: pop is defined and remote_locations[pop].XMPP_SERVER_PORT is defined

- name: "populate xmpp port"
  lineinfile: dest=/tmp/common_vrouter.env regexp='.*XMPP_SERVER_PORT$' line="XMPP_SERVER_PORT={{ xmpp_port }}" state=present
  when: xmpp_port is defined

- name: stop contrail vrouter agent if exists
  docker_service:
    project_name: contrail-vrouter
    state: absent
    definition:
      version: '2'
      services:
        vrouter-init-kernel:
          image: "{{ CONTAINER_REGISTRY }}/contrail-agent-vrouter-init-kernel:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: host
          privileged: true
          env_file: /tmp/common_vrouter.env
          volumes:
            - /var/log/contrail:/var/log/contrail
        vrouter-agent:
          image: "{{ CONTAINER_REGISTRY }}/contrail-agent-vrouter:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: host
          privileged: true
          env_file: /tmp/common_vrouter.env
          volumes:
            - /var/log/contrail:/var/log/contrail
          restart: on-failure
          depends_on:
            - vrouter-init-kernel

- name: start contrail vrouter
  docker_service:
    project_name: contrail-vrouter
    pull: yes
    definition:
      version: '2'
      services:
        nodemgr:
<<<<<<< HEAD
          image: "{{ CONTAINER_REGISTRY }}/contrail-nodemgr:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          env_file: /tmp/common.env
=======
          image: "{{ CONTAINER_REGISTRY }}/contrail-nodemgr:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          env_file: /tmp/common_vrouter.env
>>>>>>> 1877741... added support for remote compute
          environment:
            - NODE_TYPE=vrouter
          network_mode: host
          volumes:
            - /var/log/contrail:/var/log/contrail
            - /var/run/docker.sock:/var/run/docker.sock
          restart: on-failure
        vrouter-init-kernel:
          image: "{{ CONTAINER_REGISTRY }}/contrail-agent-vrouter-init-kernel:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: host
          privileged: true
          env_file: /tmp/common_vrouter.env
          volumes:
            - /usr/src:/usr/src
            - /lib/modules:/lib/modules
            - /var/log/contrail:/var/log/contrail
        vrouter-agent:
          image: "{{ CONTAINER_REGISTRY }}/contrail-agent-vrouter:{{ contrail_configuration.CONTRAIL_VERSION }}-{{ contrail_configuration.LINUX_DISTR }}-{{ contrail_configuration.OPENSTACK_VERSION }}"
          network_mode: host
          privileged: true
          env_file: /tmp/common_vrouter.env
          volumes:
            - /var/log/contrail:/var/log/contrail
          restart: on-failure
          depends_on:
            - vrouter-init-kernel
