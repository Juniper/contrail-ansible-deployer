---
- name: set instance data
  set_fact:
    instance_data: "{{ instances[hostvars[inventory_hostname].instance_name] }}"

- name: set provider data
  set_fact:
    provider_data: "{{ provider_config[instance_data.provider] }}"
  when: provider_config[instance_data.provider] is defined


# check input params
- fail:
    msg: "Kolla's internal VIP must be configured if deployment has more than one OpenStack controller."
  when:
    - openstack_nodes_list is defined
    - openstack_nodes_list | length > 1
    - kolla_globals.kolla_internal_vip_address is not defined
  run_once: True
- fail:
    msg: "Kolla's haproxy must be enabled if deployment has more than one OpenStack controller."
  when:
    - openstack_nodes_list is defined
    - openstack_nodes_list | length > 1
    - not (kolla_globals.enable_haproxy | default('yes') | bool)
  run_once: True
- fail:
    msg: "Kolla's internal VIP must be configured if kolla's haproxy is enabled"
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_internal_vip_address is not defined
  run_once: True


# detect network_interface based on kolla_globals.kolla_internal_vip_address if it's set
- name: evaluate network_interface for kolla_globals.kolla_internal_vip_address
  shell: ip route get {{ kolla_globals.kolla_internal_vip_address | quote }} | grep -o 'dev.*' | awk '{print $2}'
  register: tmp_iface_1
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_internal_vip_address is defined
- name: handle lo for network_interface detection
  shell: ip address show | awk '/inet .*{{ kolla_globals.kolla_internal_vip_address | quote }}/{print $NF;exit}'
  register: tmp_iface_2
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_internal_vip_address is defined
    - tmp_iface_1.stdout == 'lo'
- name: Set default value for network_interface
  set_fact:
    network_interface_detected: "{{ tmp_iface_1.stdout if tmp_iface_1.stdout != 'lo' else tmp_iface_2.stdout }}"
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_internal_vip_address is defined
- name: Set default value for network_interface based on instance_data.ip
  set_fact:
    network_interface_detected: "{{ item }}"
  when:
    - network_interface_detected is not defined
    - instance_data.ip is defined
    - (hostvars[inventory_hostname]['ansible_%s' % item] | default({})).get('ipv4', {}).get('address') == instance_data.ip
      or
      instance_data.ip in ((hostvars[inventory_hostname]['ansible_%s' % item] | default({})).get('ipv4_secondaries')) | map(attribute='address') | list
  with_items:
    - "{{ ansible_interfaces }}"
- name: Set default value for network_interface
  set_fact:
    network_interface_detected: "{{ ansible_default_ipv4.interface }}"
  when: network_interface_detected is not defined
- debug:
    msg: "DEBUG network_interface_detected {{ network_interface_detected }}"


# detect external_interface_detected based on kolla_globals.kolla_external_vip_address if it's set
- name: evaluate external_interface_detected for kolla_globals.kolla_external_vip_address
  shell: ip route get {{ kolla_globals.kolla_external_vip_address | quote }} | grep -o 'dev.*' | awk '{print $2}'
  register: tmp_iface_1
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_external_vip_address is defined
- name: handle lo for external_interface_detected detection
  shell: ip address show | awk '/inet .*{{ kolla_globals.kolla_external_vip_address | quote }}/{print $NF;exit}'
  register: tmp_iface_2
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_external_vip_address is defined
    - tmp_iface_1.stdout == 'lo'
- name: Set default value for external_interface_detected
  set_fact:
    external_interface_detected: "{{ tmp_iface_1.stdout if tmp_iface_1.stdout != 'lo' else tmp_iface_2.stdout }}"
  when:
    - kolla_globals.enable_haproxy | default('yes') | bool
    - kolla_globals.kolla_external_vip_address is defined
- name: Set default value for external_interface_detected equal to network_interface_detected
  set_fact:
    external_interface_detected: "{{ network_interface_detected }}"
  when: external_interface_detected is not defined
- debug:
    msg: "DEBUG external_interface_detected {{ external_interface_detected }}"

# set default internal_address
- name: Set firs openstack node as default for internal_address
  set_fact:
    internal_address_detected: "{{ openstack_nodes_list | first }}"
  when:
    - openstack_nodes_list is defined
    - openstack_nodes_list | length > 0
- debug:
    msg: "DEBUG internal_address_detected {{ internal_address_detected }}"

# evaluate mgmt IP for all hosts in deployment to be able to create /etc/hosts
- name: Set empty host_intf_dict
  set_fact:
    host_intf_dict: {}
- name: Build host_intf_dict
  set_fact:
    host_intf_dict: "{{ host_intf_dict | combine({item.value['ip'] : hostvars[item.value['ip']]['network_interface_detected']}) }}"
  with_dict: "{{ instances }}"
  when:
    - item.value['ip'] in groups['openstack_nodes']
- debug:
    var: host_intf_dict

- name: "Build hosts file with ctrl-data and domain suffix when provided"
  lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}.*' line="{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}  {{ hostvars[item]['ansible_hostname'] }}.{{ provider_data.domainsuffix }} {{ hostvars[item]['ansible_hostname'] }}" state=present insertafter='127.0.0.1'
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when:
    - provider_data is defined
    - provider_data.domainsuffix is defined
    - host_intf_dict is defined
    - host_intf_dict.get(item)

- name: Build hosts file with ctrl-data using ansible_fqdn
  lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}.*' line="{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}  {{ hostvars[item]['ansible_fqdn'] }} {{ hostvars[item]['ansible_hostname'] }}" state=present insertafter='127.0.0.1'
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when:
    - provider_data is defined
    - provider_data.domainsuffix is not defined
    - hostvars[item].ansible_fqdn is defined
    - host_intf_dict is defined
    - host_intf_dict.get(item)

- name: Build hosts file with ctrl-data without domain suffix
  lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}.*' line="{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }} {{ hostvars[item]['ansible_hostname'] }}" state=present insertafter='127.0.0.1'
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when:
    - provider_data is defined
    - provider_data.domainsuffix is not defined
    - hostvars[item].ansible_fqdn is not defined
    - host_intf_dict is defined
    - host_intf_dict.get(item)

# define empty kolla_globals
- set_fact:
    kolla_globals: {}
  when: kolla_globals is undefined
  delegate_to: localhost
  run_once: yes

- name: Merge kolla_globals params with defaults
  set_fact:
    final_kolla_globals: "{{ default_kolla_globals | combine(kolla_globals) }}"
  delegate_to: localhost
  run_once: yes

# combine final dict with storage_nodes here cause network_interface is needed for its evaluation
- name: merge os_storage_nodes
  set_fact:
    final_kolla_globals: "{{ final_kolla_globals | combine({'storage_nodes': os_nodes_storage}) }}"
  delegate_to: localhost
  run_once: yes

- debug:
    msg: "DEBUG final_kolla_globals {{ final_kolla_globals }}"

- include: inventory.yml
  delegate_to: localhost
  run_once: yes

- include: passwords.yml
  when: gen_passwords | bool
  delegate_to: localhost
  run_once: yes

- include: host_params.yml

- name: Populate etc/kolla/globals.yml
  template:
    src: "{{ role_path }}/templates/globals.yml.j2"
    dest: "{{ kolla_dir }}/etc/kolla/globals.yml"
  delegate_to: localhost
  run_once: yes

