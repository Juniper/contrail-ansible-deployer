---
- name: set instance data
  set_fact:
    instance_data: "{{ instances[hostvars[inventory_hostname].instance_name] }}"

- name: set vrouter data
  set_fact:
    vrouter_data: "{{ hostvars[inventory_hostname].instance_data.roles.vrouter }}"
  when: hostvars[inventory_hostname].instance_data.roles is defined and
        hostvars[inventory_hostname].instance_data.roles.vrouter is defined

- name: set provider data
  set_fact:
    provider_data: "{{ provider_config[instance_data.provider] }}"
  when: provider_config[instance_data.provider] is defined

- name: turn off swap
  shell: swapoff -a && sed -i '/swap[ \t]\+swap/d' /etc/fstab

- name: remove interfaces from Network Manager
  lineinfile:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    regexp: "NM_CONTROLLED=no"
    line: "NM_CONTROLLED=no"
  with_items: "{{ ansible_interfaces }}"
  ignore_errors: yes

- name: restart network service
  service:
    name: network
    state: restarted

- name: disable cloud init
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items:
  - cloud-config
  - cloud-final
  - cloud-init-local
  - cloud-init
  - cloud-config
  - NetworkManager
  ignore_errors: yes

- name: install epel
  yum:
    name: epel-release
    state: latest

- name: install ntpd
  yum:
    name: ntp
    state: latest
  when: provider_data.ntpserver is defined

- name: set ntp server
  template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
  when: provider_data.ntpserver is defined

- name: initial time sync
  shell: "ntpdate {{ provider_data.ntpserver }}"
  ignore_errors: yes
  when: provider_data.ntpserver is defined

- name: start ntp service
  service: name=ntpd state=started enabled=yes
  when: provider_data.ntpserver is defined

# centos uses chronyd by default and run it after restart instead of ntpd
# service can be absent - so ignore it
- name: disable service chronyd
  systemd:
    name: chronyd
    enabled: no
  ignore_errors: yes

- name: install pip
  yum:
    name: python-pip
    state: latest

- name: get docker compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.17.0/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: 0777

- name: install python compose
  pip:
    name: docker-compose==1.9.0

- name: create host entry dict
  set_fact:
    host_intf_dict: "{{ hostvars['localhost']['instances']|ctrl_data_intf_dict(contrail_configuration if contrail_configuration is defined else {}, kolla_config if kolla_config is defined else {}, hostvars) }}"

- debug:
    msg: "DEBUG HOST ENTRIES: {{ host_intf_dict }}"

- name: "Build hosts file with ctrl-data and domain suffix when provided"
  lineinfile: dest=/etc/hosts regexp='^{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}.*' line="{{ hostvars[item]['ansible_' + host_intf_dict.get(item)]['ipv4']['address'] }}  {{ hostvars[item]['ansible_hostname'] }}.{{ provider_data.domainsuffix }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when:
    - instance_data.provider == 'bms'
    - provider_data.domainsuffix is defined
    - host_intf_dict.get(item)

- name: "Build hosts file with domain suffix when provided"
  lineinfile: dest=/etc/hosts regexp='^{{ item }}.*' line="{{ item }} {{ hostvars[item]['ansible_hostname'] }}.{{ provider_data.domainsuffix }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'bms' and provider_data.domainsuffix is defined

- name: "Build hosts file with domain suffix"
  lineinfile: dest=/etc/hosts regexp='^{{ item }}.*' line="{{ item }} {{ hostvars[item]['ansible_fqdn'] }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'bms' and provider_data.domainsuffix is undefined and hostvars[item]['ansible_fqdn'] is defined

- name: "Build hosts file without domain suffix when not provided (bad bad)"
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ item }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'bms' and provider_data.domainsuffix is undefined and hostvars[item]['ansible_fqdn'] is undefined

- name: "Build hosts file with domain suffix when provided"
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ item }} {{ hostvars[item]['ansible_hostname'] }}.{{ provider_data.domainsuffix }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'kvm' and provider_data.domainsuffix is defined

- name: "Build hosts file wit domain suffix when not provided (bad bad)"
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ item }} {{ hostvars[item]['ansible_fqdn'] }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'kvm' and provider_data.domainsuffix is undefined and hostvars[item]['ansible_fqdn'] is defined

- name: "Build hosts file without domain suffix when not provided (bad bad)"
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ item }} {{ hostvars[item]['ansible_hostname'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'kvm' and provider_data.domainsuffix is undefined and hostvars[item]['ansible_fqdn'] is undefined

- name: "Build hosts file for aws instances"
  lineinfile: dest=/etc/hosts regexp='.*{{ hostvars[item]['private_ip'] }}$' line="{{ hostvars[item]['private_ip'] }} {{ hostvars[item]['ansible_hostname'] }} {{ hostvars[item]['private_dns_name'] }}" state=present
  with_items: "{{ hostvars[inventory_hostname].groups.container_hosts }}"
  when: instance_data.provider == 'aws'

- name: create log file directory
  file:
   dest: /var/log/docker/contrail
   state: directory
   mode: 0777

- name: create k8s repo
  yum_repository:
    name: Kubernetes
    description: k8s repo
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
    gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
    repo_gpgcheck: yes
    gpgcheck: yes
  when: instance_data.roles is defined and 
        ( instance_data.roles.k8s_master is defined or instance_data.roles.k8s_node is defined )

- name: install kubelet-1.9.2-0
  yum:
    name: kubelet-1.9.2-0
    state: latest
  when: instance_data.roles is defined and 
        ( instance_data.roles.k8s_master is defined or instance_data.roles.k8s_node is defined )

- name: install kubeadm-1.9.2-0
  yum:
    name: kubeadm-1.9.2-0
    state: latest
  when: instance_data.roles is defined and 
        ( instance_data.roles.k8s_master is defined or instance_data.roles.k8s_node is defined )

- name: install kubectl-1.9.2-0
  yum:
    name: kubectl-1.9.2-0
    state: latest
  when: instance_data.roles is defined and 
        ( instance_data.roles.k8s_master is defined or instance_data.roles.k8s_node is defined )

- name: set selinux to permissive
  selinux:
    policy: targeted
    state: permissive

- name: sysctl -w net.bridge.bridge-nf-call-iptables=1
  shell: sysctl -w net.bridge.bridge-nf-call-iptables=1 && echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf

- name: sysctl -w net.bridge.bridge-nf-call-ip6tables=1
  shell: sysctl -w net.bridge.bridge-nf-call-ip6tables=1 && echo "net.bridge.bridge-nf-call-ip6tables=1" >> /etc/sysctl.conf

- name: configure tcp_keepalive_time
  sysctl:
    name: net.ipv4.tcp_keepalive_time
    value: 15
    sysctl_set: yes

- name: configure tcp_keepalive_intvl
  sysctl:
    name: net.ipv4.tcp_keepalive_intvl
    value: 15
    sysctl_set: yes

- name: configure tcp_keepalive_probes
  sysctl:
    name: net.ipv4.tcp_keepalive_probes
    value: 5
    sysctl_set: yes

- name: flush iptables
  shell: iptables -F

- name: install latest kernel
  yum:
    name: 'kernel'
    state: latest
  register: upgrade_kernel
  when: (contrail_configuration.UPGRADE_KERNEL is defined and contrail_configuration.UPGRADE_KERNEL == true) or
        (instance_data.UPGRADE_KERNEL is defined and instance_data.UPGRADE_KERNEL == true)

# enable IOMMU if sriov/vfio-dpdk is enabled

- name: set grub file name.
  stat:
    path: "/etc/default/grub"
  register: file_rc

- name: set SRIOV data
  set_fact:
    contrail_modify_grub: 'True'
    contrail_grub_cmd_line: 'nomdmonddf nomdmonisw intel_iommu=on'
  when: vrouter_data is defined and (vrouter_data.sriov is defined and vrouter_data.sriov == true)

- name: set VFIO-DPDK data
  set_fact:
    contrail_modify_grub: 'True'
    contrail_grub_cmd_line: 'intel_iommu=on iommu=pt'
  when: vrouter_data is defined and
        (vrouter_data.AGENT_MODE is defined and vrouter_data.AGENT_MODE == 'dpdk') and
        (vrouter_data.DPDK_UIO_DRIVER is defined and
        (vrouter_data.DPDK_UIO_DRIVER == 'vfio_pci' or vrouter_data.DPDK_UIO_DRIVER == 'vfio-pci'))

- name: Remove the SRIOV/VFIO config if present - to fix limitation in lineinfile
  replace:
    path: "/etc/default/grub"
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT=\"((.*))(( {{ contrail_grub_cmd_line}}))\"'
    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="\1"'
  register: contrail_grub_restored
  when: contrail_modify_grub is defined and file_rc.stat.exists == true

- name: Modify grub to include iommu for SRIOV and VFIO-DPDK
  replace:
    path: "/etc/default/grub"
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT=\"((.*))(( {{ contrail_grub_cmd_line}})|(?<! {{contrail_grub_cmd_line}}))\"'
    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 {{ contrail_grub_cmd_line }}"'
  register: contrail_grub_modified
  when: contrail_modify_grub is defined and file_rc.stat.exists == true

- name: Add iommu for grub for SRIOV/VFIO-DPDK as there is no existing config
  lineinfile:
    path: "/etc/default/grub"
    line: 'GRUB_CMDLINE_LINUX_DEFAULT=" {{contrail_grub_cmd_line}}"'
    insertafter: EOF
  register: contrail_grub_added
  when: contrail_modify_grub is defined and file_rc.stat.exists == true and contrail_grub_modified.changed == false

- name: execute update-grub/sys
  command: grub2-mkconfig -o /boot/grub2/grub.cfg
  register: gstat
  when: contrail_modify_grub is defined and file_rc.stat.exists == true and
        ((contrail_grub_restored.changed == false and contrail_grub_modified.changed == true) or
        (contrail_grub_added.changed == true))

- name: restart server
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  become: true
  when: (upgrade_kernel is defined and upgrade_kernel.changed) or
        (contrail_modify_grub is defined and gstat is defined and gstat.changed)

- name: wait for server to come back online
  wait_for_connection:
    delay: 30
    timeout: 2400
  when: (upgrade_kernel is defined and upgrade_kernel.changed) or
        (contrail_modify_grub is defined and gstat is defined and gstat.changed)

