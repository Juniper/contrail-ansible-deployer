---
- name: check if master is already running
  shell: kubectl cluster-info
  register: master_state
  ignore_errors: true

- name: set master_running state to true if master is running
  set_fact:
    master_running: true
  when: master_state is defined and master_state.rc == 0

- name: set master_running state to false if master is not running
  set_fact:
    master_running: false
  when: (master_state is undefined) or
        (master_state is defined and master_state.rc == 1)

- name: get controller ip from all ips
  set_fact:
    listen_ip: "{{ item[0] }}"
  when: item[0] == item[1]
  with_nested:
    - "{{ hostvars[inventory_hostname].ansible_all_ipv4_addresses }}"
    - "{{ contrail_configuration.KUBERNETES_API_NODES }}"

- name: Configure kubelet
  include: configure_kubelet.yml

- name: enable kubelet service
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: True
  when: master_running == false

- name: initialize k8s master with listen ip
  shell: |
      kubeadm init --token-ttl 0 --kubernetes-version v{{ k8s_version }} --apiserver-advertise-address {{ listen_ip }} --pod-network-cidr {{ kube_pod_subnet }} --service-cidr {{ kube_service_subnet }} &&
      mkdir -p $HOME/.kube &&
      cp -u /etc/kubernetes/admin.conf $HOME/.kube/config &&
      chown -R $(id -u):$(id -g) $HOME/.kube
  when: listen_ip is defined and master_running == false

- name: initialize k8s master without listen ip
  shell: |
      kubeadm init --token-ttl 0 --kubernetes-version v{{ k8s_version }} --pod-network-cidr {{ kube_pod_subnet }} --service-cidr {{ kube_service_subnet }} &&
      mkdir -p $HOME/.kube &&
      cp -u /etc/kubernetes/admin.conf $HOME/.kube/config &&
      chown -R $(id -u):$(id -g) $HOME/.kube
  when: listen_ip is undefined and master_running == false

- name: get master token
  shell: kubeadm token list |grep "system:bootstrappers:kubeadm:default-node-token" |grep "forever" |awk '{print $1}'
  register: output

- name: set master token
  set_fact:
    mastertoken: "{{ output.stdout }}"

- name: get nodes
  shell: kubectl get nodes -o yaml |grep "\- address:" |awk '{print $3}'
  register: nodes_list_output

- name: set node list
  set_fact:
    node_list: "{{ nodes_list_output.stdout }}"

#Need to upgrade CoreDNS to 1.2.6 for fix of Loop crash issue
#Remove once k8s_version version bumped up to 1.13.1 or higher
- name: upgrade CoreDNS to 1.2.6
  shell: "kubectl patch deployment -n=kube-system coredns -p '{\"spec\": {\"template\": {\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/coredns:1.2.6\", \"name\":\"coredns\",\"resources\":{\"limits\":{\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"70Mi\"}}}]}}}}'"
  when: k8s_version == "1.12.9"
