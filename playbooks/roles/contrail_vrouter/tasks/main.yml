---
- name: "create /etc/contrail/vrouter"
  file:
    path: /etc/contrail/vrouter
    state: directory
    recurse: yes

- name: "get /etc/contrail/common_vrouter.env stat"
  stat:
    path: "/etc/contrail/common_vrouter.env"
  register: st

- name: "delete /etc/contrail/common_vrouter.env if exists"
  file:
    path: "/etc/contrail/common_vrouter.env"
    state: absent
  when: st.stat.exists is defined and st.stat.exists

- name: "create /etc/contrail/common_vrouter.env"
  file:
    path: "/etc/contrail/common_vrouter.env"
    state: touch

- name: "get pop"
  set_fact:
    location: "{{ roles[instance_name].vrouter.location }}"
  when: roles[instance_name].vrouter.location is defined

- name: "init pop control peer list"
  set_fact:
    pop_control_list: []
  when: location is defined

- name: "add pop control nodes to list"
  set_fact:
    pop_control_list: "{{ pop_control_list + [ instances[item.key].ip ] }}"
  when: location is defined and item.value.control is defined and item.value.control.location is defined and item.value.control.location == location
  with_dict: "{{ roles }}"
  ignore_errors: yes

- name: "create controller host list if not defined"
  set_fact:
    pop_control_nodes: "{{ pop_control_list|join(',') }}"
  when: pop_control_list is defined

- name: "create contrail_configuration.CONTROL_NODES"
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'CONTROL_NODES': pop_control_nodes}) }}"
  when: pop_control_nodes is defined and roles[instance_name].vrouter.CONTROL_NODES is undefined

- name: "set DNS servers if location is defined"
  set_fact:
    contrail_configuration: "{{ contrail_configuration|default({})|combine({'DNS_NODES': contrail_configuration.DNS_NODES|default(contrail_configuration.CONTROLLER_NODES)}) }}"
  when: pop_control_nodes is defined and roles[instance_name].vrouter.DNS_NODES is undefined

- name: "populate cluster wide common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ contrail_configuration }}"
  no_log: True

- name: "populate instance specific common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ instances[instance_name].contrail_configuration }}"
  when: instances[instance_name].contrail_configuration is defined
  ignore_errors: yes
  no_log: True

- name: "populate pod specific common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ roles[instance_name].vrouter }}"
  ignore_errors: yes
  no_log: True

- name: "populate pop settings"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^{{ item.key }}=.*' line="{{ item.key }}={{ item.value }}" state=present
  with_dict: "{{ remote_locations[location] }}"
  when: location is defined

- name: "add kubemanager token to common_vrouter.env"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^K8S_TOKEN=.*' line="K8S_TOKEN={{ hostvars[k8s_master_name].kubemanagertoken }}" state=present
  when: k8s_master_name is defined and hostvars[k8s_master_name].kubemanagertoken is defined

- name: "add SUBCLUSTER name if location is defined and subcluster name is defined"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^SUBCLUSTER=.*' line="SUBCLUSTER={{ remote_locations[location].SUBCLUSTER }}" state=present
  when: location is defined and remote_locations[location].SUBCLUSTER is defined

- name: "add SUBCLUSTER name if location is defined and subcluster name is undefined"
  lineinfile: dest=/etc/contrail/common_vrouter.env regexp='^SUBCLUSTER=.*' line="SUBCLUSTER={{ location }}" state=present
  when: location is defined and remote_locations[location].SUBCLUSTER is undefined

- name: set vrouter kernel init image name
  set_fact:
    vrouter_kernel_init_img_name: contrail-vrouter-kernel-build-init
  when: ansible_os_family == 'Debian'

- name: set vrouter kernel init image name
  set_fact:
    vrouter_kernel_init_img_name: contrail-vrouter-kernel-init
  when: ansible_os_family == 'RedHat'

- name: update image
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-node-init
    - contrail-nodemgr
    - "{{ vrouter_kernel_init_img_name }}"
    - contrail-vrouter-agent
  when:
    - contrail_configuration.UPDATE_IMAGES is undefined or contrail_configuration.UPDATE_IMAGES != false
    - roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: create contrail vrouter compose file
  template:
    src: contrail-vrouter.yaml.j2
    dest: "/etc/contrail/vrouter/docker-compose.yaml"
  when: roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'

- name: "start contrail vrouter"
  docker_service:
    project_src: /etc/contrail/vrouter
  when:
    - roles[instance_name].vrouter.AGENT_MODE is undefined or roles[instance_name].vrouter.AGENT_MODE != 'dpdk'
    - roles[instance_name].vrouter.TSN_MODE is undefined or roles[instance_name].vrouter.TSN_MODE != true

- name: update image for dpdk vrouter
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-node-init
    - contrail-nodemgr
    - contrail-vrouter-kernel-init-dpdk
    - contrail-vrouter-agent-dpdk
    - contrail-vrouter-agent
  when:
    - contrail_configuration.UPDATE_IMAGES is undefined or contrail_configuration.UPDATE_IMAGES != false
    - roles[instance_name].vrouter.AGENT_MODE is defined
    - roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "create contrail dpdk vrouter compose file"
  template:
    src: contrail-vrouter-dpdk.yaml.j2
    dest: "/etc/contrail/vrouter/docker-compose.yaml"
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "start contrail dpdk vrouter"
  docker_service:
    project_src: /etc/contrail/vrouter
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'

- name: "Restart nova-compute"
  shell: "docker restart nova_compute"
  when: roles[instance_name].vrouter.AGENT_MODE is defined and roles[instance_name].vrouter.AGENT_MODE == 'dpdk'
  ignore_errors: yes

- name: "create /etc/contrail/vrouter_tor_agent"
  file:
    path: /etc/contrail/vrouter_tor_agent
    state: directory
    recurse: yes
  when:
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "Make list of env files for tor agent containers"
  set_fact:
    tor_agent_id_list: "{{ tor_agent_id_list | default([]) }} + [ '{{tor_agent_config[item].get('TOR_AGENT_ID') | string}}' ]"
    tor_agent_env_list: "{{ tor_agent_env_list |default([]) }} + [ '{{'/etc/contrail/vrouter_tor_agent/tor_agent_'}}{{tor_agent_config[item].get('TOR_AGENT_ID') | string}}{{'.env'}}' ]"
  with_items: "{{ roles[instance_name].vrouter.TOR_AGENTS }}"
  when:
    - roles[instance_name].vrouter.TOR_AGENTS is defined
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true
  ignore_errors: yes
  no_log: True

- name: "get /etc/contrail/vrouter_tor_agent/tor_agent.env stat"
  stat:
    path: "{{ item }}"
  register: st_tor_env
  with_items: "{{ tor_agent_env_list }}"

- name: "delete /etc/contrail/vrouter_tor_agent/tor_agent.env if exists"
  file:
    path: "{{ item.0 }}"
    state: absent
  with_together:
    - "{{ tor_agent_env_list }}"
    - "{{ st_tor_env.results }}"
  when:
    - item.1.stat.exists is defined and item.1.stat.exists

- name: "create tor agent env files"
  file:
    path: "{{ item }}"
    state: touch
  with_items:
    - "{{ tor_agent_env_list }}"
  when:
    - roles[instance_name].vrouter.TOR_AGENTS is defined
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "Populate env files for tor agent containers"
  template:
    src: tor-agent-env.yaml.j2
    dest: "{{item.1}}"
  with_together:
    - "{{ roles[instance_name].vrouter.TOR_AGENTS }}"
    - "{{ tor_agent_env_list }}"
  when:
    - roles[instance_name].vrouter.TOR_AGENTS is defined
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "update image for tor agent"
  shell: "docker pull {{ container_registry }}/{{ item }}:{{ contrail_version_tag }}"
  with_items:
    - contrail-vrouter-tor-agent
  when:
    - contrail_configuration.UPDATE_IMAGES is undefined or contrail_configuration.UPDATE_IMAGES != false
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "create contrail tor agent compose files"
  template:
    src: contrail-vrouter-tor-agent.yaml.j2
    dest: "{{'/etc/contrail/vrouter_tor_agent/docker-compose-tor-agent-'}}{{item.1}}{{'.yaml'}}"
  with_together:
    - "{{ tor_agent_env_list }}"
    - "{{ tor_agent_id_list }}"
  when:
    - roles[instance_name].vrouter.TOR_AGENTS is defined
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "get tor agent compose file list"
  set_fact:
    tor_agent_compose_list: "{{ tor_agent_compose_list | default(['/etc/contrail/vrouter/docker-compose.yaml']) }} + ['{{'/etc/contrail/vrouter_tor_agent/docker-compose-tor-agent-'}}{{ item }}{{'.yaml'}}']"
  with_items: "{{ tor_agent_id_list }}"
  when:
    - roles[instance_name].vrouter.TOR_AGENTS is defined
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "start contrail tsn node containers"
  docker_service:
    project_src: /etc/contrail/vrouter_tor_agent
    files: "{{ tor_agent_compose_list }}"
  when:
    - roles[instance_name].vrouter.TOR_AGENTS is defined
    - roles[instance_name].vrouter.TSN_MODE is defined and roles[instance_name].vrouter.TSN_MODE == true

- name: "create /var/log/contrail/lbaas"
  file:
    path: /var/log/contrail/lbaas
    state: directory
    recurse: yes

- name: "configure rsyslogd"
  shell: "echo '$AddUnixListenSocket /var/log/contrail/lbaas/haproxy.log.sock' > /etc/rsyslog.d/contrail-lbaas-haproxy.conf"

- name: "restart rsyslogd"
  service:
    name: rsyslog
    state: restarted
