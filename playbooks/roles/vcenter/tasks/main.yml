---
- name: Update default validate_cert in vcenter_servers
  set_fact:
    vcs: >-
      {%- for vc in vcenter_servers -%}
        {%- if vc.values()[0]['validate_certs'] is not defined -%}
          {{ vcs |default([]) + [{vc.keys()[0]: vc.values()[0] |combine({'validate_certs': False})}] }}
        {%- endif -%}
      {%- endfor -%}

- name: update vcenter_servers var post validate_cert
  set_fact:
    vcenter_servers: "{{ vcs if vcs is defined and vcs else vcenter_servers }}"

- name: substitue default VM DVS values for overlay
  set_fact:
    vc_servers_dvs: >-
      {%- for vc in vcenter_servers -%}
        {%- if vc.values()[0]['dv_switch'] is not defined -%}
          {{ vc_servers_dvs |default([]) + [{vc.keys()[0]: vc.values()[0] |combine({'dv_switch': dv_switch})}] }}
        {%- endif -%}
      {%- endfor -%}

- name: update vcenter_servers var post VM DVS defaults
  set_fact:
    vcenter_servers: "{{ vc_servers_dvs }}"
  when: vc_servers_dvs is defined and vc_servers_dvs

- name: substitue default VM DVS PG values
  set_fact:
    vc_servers_pg: >-
      {%- for vc in vcenter_servers -%}
        {%- if vc['dv_port_group'] is not defined -%}
          {{ vc_servers_pg |default([]) + [{vc.keys()[0]: vc.values()[0] |combine({'dv_port_group': dv_port_group})}] }}
        {%- endif -%}
      {%- endfor -%}

- name: set vcenter_servers var post VM DVS PG defaults
  set_fact:
    vcenter_servers: "{{ vc_servers_pg }}"
  when: vc_servers_pg is defined and vc_servers_pg

- name: create vcenter servers list of dicts
  set_fact:
    vc_servers: "{{ vc_servers | default ([]) + item.values() }}"
  with_items: "{{ vcenter_servers }}"

- name: Update default validate_cert in esxihosts
  set_fact:
    esxihosts1: >-
      {%- for host in esxihosts -%}
        {%- if host['validate_certs'] is not defined -%}
          {{ esxihosts1 | default([]) + [host | combine({'validate_certs': False})] }}
        {%- endif -%}
      {%- endfor -%}

- name: set esxihosts var post validate_cert
  set_fact:
    esxihosts: "{{ esxihosts1 if esxihosts1 is defined and esxihosts1 else esxihosts }}"

- name: substitute default std fabric switch and pg values in esxihosts
  set_fact:
    esxihosts_std: >-
      {%- for host in esxihosts -%}
        {%- if host['std_switch_list'] is not defined -%}
          {{ esxihosts_std | default([]) + [host | combine({'std_switch_list': [{'pg_name': std_pg_name, 'switch_name': std_switch_name}]})] }}
        {%- endif -%}
      {%- endfor -%}

- name: set esxihosts var post std switch defaults
  set_fact:
    esxihosts: "{{ esxihosts_std }}"
  when: esxihosts_std is defined and esxihosts_std

- name: substitute vcenter in the esxi host
  set_fact:
    esxi_servers: >-
      {%- for host in esxihosts -%}
        {%- for vcsrv in vcenter_servers -%}
          {%- if host['vcenter_server'] == vcsrv.keys()[0] -%}
            {{ esxi_servers | default ([]) + [host | combine({'vcenter_server': vcsrv.values()[0]})] }}
          {%- endif -%}
        {%- endfor -%}
      {%- endfor -%}

- name: Create Datacenters
  vmware_datacenter:
    hostname: "{{ item.hostname }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    validate_certs: "{{ item.validate_certs }}"
    datacenter_name: "{{ item.datacentername }}"
    state: present
  with_items: "{{ vc_servers }}"

- name: Create Clusters in all DCs
  include: clusters.yml vc_server={{server}}
  with_items: "{{ vc_servers }}"
  loop_control: 
    loop_var: server

- name: Add esxi hosts to cluster
  include: esxi_hosts.yml esxi_host={{item}}
  with_items: "{{ esxi_servers }}"

- name: Wait for add host task complete
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ added_hosts }}"
  register: add_host
  until: add_host.finished
  retries: 300

- name: Remove esxi maintenance mode
  include: maint_mode.yml esxi_host={{item}}
  with_items: "{{ esxi_servers }}"

- name: Wait for maintenance mode task complete
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ maint_mode }}"
  register: r2
  until: r2.finished
  retries: 300

- name: Add VM DVS in all DCs
  include: add_dvs.yml vc_server={{item}}
  with_items: "{{ vc_servers }}"

- name: Fix VM DVS-PGs and add pvlan config
  include: fix_dvs.yml vc_server={{item}}
  with_items: "{{ vc_servers }}"

- name: Wait for VM DVS-PG pvlan fix task
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ dvs_fixed }}"
  register: t1
  until: t1.finished
  retries: 300

- name: add esxi host to DVS
  include: add_host_dvs.yml esxi_host={{item}}
  with_items: "{{ esxi_servers }}"

- name: create fabric PG in esxi host
  include: add_fab_pg.yml esxi_host={{item}}
  when: item.std_switch_list
  with_items: "{{ esxi_servers }}"

- name: Wait for fabric PG completion
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ pgs_completed }}"
  register: pg_completed
  until: pg_completed.finished
  retries: 300
  when: pgs_completed

- name: Create contrail compute vm in esxi host
  include: create_contrail_vm.yml
  with_items: "{{ esxi_servers }}"
  loop_control:
    loop_var: esxi_host

- name: Wait for contrailVm create completion
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ vms_created }}"
  register: vm_completed
  until: vm_completed.finished
  retries: 300

- name: Add nics to ContrailVM
  include: add_nic.yml esxi_host={{item}}
  with_items: "{{ esxi_servers }}"

- name: Wait for add nic completion
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ nics_added }}"
  register: nic_completed
  until: nic_completed.finished
  retries: 300

- name: Fix contrailVM fab nic mac address
  include: fix_mac.yml esxi_host={{item}}
  with_items: "{{ esxi_servers }}"

- name: Wait for mac address fix to complete
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ mac_changed }}"
  register: mac_fixed
  until: mac_fixed.finished
  retries: 300

- name: Power on ContrailVMs
  include: power_on_vm.yml esxi_host={{item}}
  with_items: "{{ esxi_servers }}"

- name: Wait for VM power on task complete
  async_status: jid={{ item.ansible_job_id }}
  with_items: "{{ powerd_on }}"
  register: power_on
  until: power_on.finished
  retries: 300

