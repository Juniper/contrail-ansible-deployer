---

- name: prepare variables for configuration files
  set_fact:
    win_dns_nodes: []
    win_collector_nodes: []

- name: append dns client port to dns nodes ip's
  set_fact:
    win_dns_nodes: "{{ win_dns_nodes + [item ~ ':' ~ contrail_configuration.DNS_SERVER_PORT] }}"
  with_items: "{{ contrail_configuration.DNS_NODES.split(',') }}"

- name: append collector port to collector nodes ip's
  set_fact:
    win_collector_nodes: "{{ win_collector_nodes + [item ~ ':' ~ contrail_configuration.COLLECTOR_PORT] }}"
  with_items: "{{ contrail_configuration.ANALYTICS_NODES.split(',') }}"

- name: start Docker
  win_service:
    name: docker
    state: started

- name: extract vrouter artifacts from container
  win_shell: >
    docker run --rm -v {{ win_host_artifacts_dir }}:{{ win_container_artifacts_dir }}
    {{ container_registry }}/contrail-windows-vrouter:{{ contrail_configuration.CONTRAIL_VERSION }}

- name: copy debug dlls to compute node
  win_copy:
    src: '{{ contrail_configuration.WINDOWS_DEBUG_DLLS_PATH }}/'
    dest: 'C:\Windows\System32\'
  when: contrail_configuration.WINDOWS_DEBUG_DLLS_PATH is defined

- name: import vrouter certificate
  win_shell: |
    Import-Certificate -CertStoreLocation Cert:\LocalMachine\Root\ {{ win_host_artifacts_dir }}\vrouter\vRouter.cer
    Import-Certificate -CertStoreLocation Cert:\LocalMachine\TrustedPublisher\ {{ win_host_artifacts_dir }}\vrouter\vRouter.cer

- name: install vrouter driver
  win_package:
    path: '{{ win_host_artifacts_dir }}\vrouter\vRouter.msi'
    state: present

- name: install utils
  win_package:
    path: '{{ win_host_artifacts_dir }}\vrouter\utils.msi'
    state: present

- name: install vrouter agent
  win_package:
    path: '{{ win_host_artifacts_dir }}\agent\contrail-vrouter-agent.msi'
    state: present

- name: get nodemgr packages
  win_find:
    paths: '{{ win_host_artifacts_dir }}\nodemgr'
    patterns: ['*.tar.gz']
  register: nodemgr_packages

- name: install nodemgr with dependencies
  win_shell: 'pip install {{ item.path }}'
  with_items: "{{ nodemgr_packages.files }}"

- name: create vrouter nodemgr configuration file
  win_template:
    src: templates/contrail-nodemgr-win.conf.j2
    dest: C:\ProgramData\Contrail\etc\contrail\contrail-vrouter-nodemgr.conf
    newline_sequence: "\r\n"
  register: nodemgr_cfg

- name: create vrouter nodemgr service
  win_nssm:
    name: contrail-vrouter-nodemgr
    application: C:\Python27\Scripts\contrail-nodemgr.exe
    state: present
    start_mode: auto
    app_parameters_free_form: >
      --nodetype contrail-vrouter

- name: ensure nodemgr service is running with fresh configuration
  win_service:
    name: contrail-vrouter-nodemgr
    state: "{{ (nodemgr_cfg.changed) | ternary('restarted', 'started') }}"

- name: run hostname command
  win_shell: "hostname"
  register: hostname_output

# ansible_hostname returns whole hostname in upper case (eg. "HOSTNAME").
# nodemgr sends hostname with original letter case (eg. "hostNAME") and
# we want to use the same case, so we have to extract it ourselves.
- name: extract hostname with original letter case
  set_fact:
    fqdn: "{{ hostname_output.stdout_lines | last}}"

- name: append DNS suffix to FQDN if supplied
  set_fact:
    fqdn: "{{ fqdn }}.{{ provider_config.bms_win.domainsuffix }}"
  when: provider_config.bms_win.domainsuffix is defined

- name: get auth token from keystone
  delegate_to: localhost
  uri:
    url: "{{ contrail_configuration.KEYSTONE_AUTH_PROTO }}://{{ contrail_configuration.KEYSTONE_AUTH_HOST }}:{{ contrail_configuration.KEYSTONE_AUTH_PUBLIC_PORT }}{{ contrail_configuration.KEYSTONE_AUTH_URL_TOKENS }}"
    method: POST
    body_format: json
    body: |
      {
        "auth": {
          "tenantName": "{{ contrail_configuration.KEYSTONE_AUTH_ADMIN_TENANT }}",
          "passwordCredentials": {
            "username": "{{ contrail_configuration.KEYSTONE_AUTH_ADMIN_USER }}",
            "password": "{{ contrail_configuration.KEYSTONE_AUTH_ADMIN_PASSWORD }}"
          }
        }
      }
    return_content: true
  register: auth_token_response
  when: contrail_configuration.AUTH_MODE == 'keystone'

- name: extract auth_token from response
  set_fact:
    auth_token: "{{ auth_token_response.json.access.token.id }}"
  when: contrail_configuration.AUTH_MODE == 'keystone'

- name: set empty headers for no authentication
  set_fact:
    rest_headers: {}
  when: contrail_configuration.AUTH_MODE != 'keystone'

- name: set headers with token for keystone
  set_fact:
    rest_headers:
      X-Auth-Token: "{{ auth_token }}"
  when: contrail_configuration.AUTH_MODE == 'keystone'

- name: create virtual router in contrail
  delegate_to: localhost
  uri:
    url: "http://{{ (contrail_configuration.CONFIG_NODES.split(','))[0] }}:{{ contrail_configuration.CONFIG_API_PORT }}/virtual-routers"
    method: POST
    body_format: json
    body: |
      {
        "virtual-router": {
          "virtual_router_ip_address": "{{ inventory_hostname }}",
          "fq_name": ["default-global-system-config", "{{ fqdn }}"],
          "parent_type": "global-system-config"
        }
      }
    status_code: 200, 409
    headers: "{{ rest_headers }}"

- name: create vrouter-agent service
  win_nssm:
    name: contrail-vrouter-agent
    application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
    app_parameters_free_form: >-
      -NoProfile
      -File entrypoint.ps1
    stdout_file: "{{ win_agent_nssm_log_path }}"
    stderr_file: "{{ win_agent_nssm_log_path }}"
    start_mode: manual
    state: present

# Unfortunately currently it's not possible to set those fields with win_nssm module
- name: change vrouter-agent service start directory
  win_shell: nssm set contrail-vrouter-agent AppDirectory "C:\Program Files\Juniper Networks\Agent"

- name: stop vrouter-agent service from replacing stdout log file
  win_shell: nssm reset contrail-vrouter-agent AppStdoutCreationDisposition

- name: stop vrouter-agent service from replacing stderr log file
  win_shell: nssm reset contrail-vrouter-agent AppStderrCreationDisposition
